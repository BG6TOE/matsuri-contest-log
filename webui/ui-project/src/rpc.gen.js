// mcl-rpc v0.0.1 9e4b584f053fac80af73bcb9d84d5f9636e9932d
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/javascript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "9e4b584f053fac80af73bcb9d84d5f9636e9932d"


//
// Types
//

export class QSO {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['uid'] = _data['uid']
      this._data['contest_id'] = _data['contest_id']
      this._data['station_callsign'] = _data['station_callsign']
      this._data['dx_callsign'] = _data['dx_callsign']
      this._data['freq_hz'] = _data['freq_hz']
      this._data['time'] = _data['time']
      this._data['mode'] = _data['mode']
      this._data['rst_sent'] = _data['rst_sent']
      this._data['rst_rcvd'] = _data['rst_rcvd']
      this._data['exch_sent'] = _data['exch_sent']
      this._data['exch_rcvd'] = _data['exch_rcvd']
      
    }
  }
  get uid() {
    return this._data['uid']
  }
  set uid(value) {
    this._data['uid'] = value
  }
  get contest_id() {
    return this._data['contest_id']
  }
  set contest_id(value) {
    this._data['contest_id'] = value
  }
  get station_callsign() {
    return this._data['station_callsign']
  }
  set station_callsign(value) {
    this._data['station_callsign'] = value
  }
  get dx_callsign() {
    return this._data['dx_callsign']
  }
  set dx_callsign(value) {
    this._data['dx_callsign'] = value
  }
  get freq_hz() {
    return this._data['freq_hz']
  }
  set freq_hz(value) {
    this._data['freq_hz'] = value
  }
  get time() {
    return this._data['time']
  }
  set time(value) {
    this._data['time'] = value
  }
  get mode() {
    return this._data['mode']
  }
  set mode(value) {
    this._data['mode'] = value
  }
  get rst_sent() {
    return this._data['rst_sent']
  }
  set rst_sent(value) {
    this._data['rst_sent'] = value
  }
  get rst_rcvd() {
    return this._data['rst_rcvd']
  }
  set rst_rcvd(value) {
    this._data['rst_rcvd'] = value
  }
  get exch_sent() {
    return this._data['exch_sent']
  }
  set exch_sent(value) {
    this._data['exch_sent'] = value
  }
  get exch_rcvd() {
    return this._data['exch_rcvd']
  }
  set exch_rcvd(value) {
    this._data['exch_rcvd'] = value
  }
  
  toJSON() {
    return this._data
  }
}

  
//
// Client
//

export class MCLService {
  constructor(hostname, fetch) {
    this.path = '/rpc/MCLService/'
    this.hostname = hostname
    this.fetch = fetch
  }

  url(name) {
    return this.hostname + this.path + name
  }
  
  getQSOList = (headers) => {
    return this.fetch(
      this.url('GetQSOList'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          qsos: (_data.qsos)
        }
      })
    })
  }
  
  updateQSO = (args, headers) => {
    return this.fetch(
      this.url('UpdateQSO'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          success: (_data.success)
        }
      })
    })
  }
  
}

  
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res) => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status }
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}
