// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/radio.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RadioClient is the client API for Radio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RadioClient interface {
	GetRadioMode(ctx context.Context, in *RadioSelector, opts ...grpc.CallOption) (*RadioStatus, error)
	PollRadioMode(ctx context.Context, in *RadioSelector, opts ...grpc.CallOption) (Radio_PollRadioModeClient, error)
	RadioOp(ctx context.Context, in *RadioCommand, opts ...grpc.CallOption) (*StandardResponse, error)
	ListAudioDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AudioDeviceList, error)
	ListSupportedRadios(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SupportedRadioList, error)
	SetupRadio(ctx context.Context, in *RadioConfig, opts ...grpc.CallOption) (*StandardResponse, error)
	ShutdownRadio(ctx context.Context, in *RadioConfig, opts ...grpc.CallOption) (*StandardResponse, error)
}

type radioClient struct {
	cc grpc.ClientConnInterface
}

func NewRadioClient(cc grpc.ClientConnInterface) RadioClient {
	return &radioClient{cc}
}

func (c *radioClient) GetRadioMode(ctx context.Context, in *RadioSelector, opts ...grpc.CallOption) (*RadioStatus, error) {
	out := new(RadioStatus)
	err := c.cc.Invoke(ctx, "/mcl.Radio/GetRadioMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioClient) PollRadioMode(ctx context.Context, in *RadioSelector, opts ...grpc.CallOption) (Radio_PollRadioModeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Radio_ServiceDesc.Streams[0], "/mcl.Radio/PollRadioMode", opts...)
	if err != nil {
		return nil, err
	}
	x := &radioPollRadioModeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Radio_PollRadioModeClient interface {
	Recv() (*RadioStatus, error)
	grpc.ClientStream
}

type radioPollRadioModeClient struct {
	grpc.ClientStream
}

func (x *radioPollRadioModeClient) Recv() (*RadioStatus, error) {
	m := new(RadioStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *radioClient) RadioOp(ctx context.Context, in *RadioCommand, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/mcl.Radio/RadioOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioClient) ListAudioDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AudioDeviceList, error) {
	out := new(AudioDeviceList)
	err := c.cc.Invoke(ctx, "/mcl.Radio/ListAudioDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioClient) ListSupportedRadios(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SupportedRadioList, error) {
	out := new(SupportedRadioList)
	err := c.cc.Invoke(ctx, "/mcl.Radio/ListSupportedRadios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioClient) SetupRadio(ctx context.Context, in *RadioConfig, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/mcl.Radio/SetupRadio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioClient) ShutdownRadio(ctx context.Context, in *RadioConfig, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/mcl.Radio/ShutdownRadio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RadioServer is the server API for Radio service.
// All implementations must embed UnimplementedRadioServer
// for forward compatibility
type RadioServer interface {
	GetRadioMode(context.Context, *RadioSelector) (*RadioStatus, error)
	PollRadioMode(*RadioSelector, Radio_PollRadioModeServer) error
	RadioOp(context.Context, *RadioCommand) (*StandardResponse, error)
	ListAudioDevices(context.Context, *emptypb.Empty) (*AudioDeviceList, error)
	ListSupportedRadios(context.Context, *emptypb.Empty) (*SupportedRadioList, error)
	SetupRadio(context.Context, *RadioConfig) (*StandardResponse, error)
	ShutdownRadio(context.Context, *RadioConfig) (*StandardResponse, error)
	mustEmbedUnimplementedRadioServer()
}

// UnimplementedRadioServer must be embedded to have forward compatible implementations.
type UnimplementedRadioServer struct {
}

func (UnimplementedRadioServer) GetRadioMode(context.Context, *RadioSelector) (*RadioStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRadioMode not implemented")
}
func (UnimplementedRadioServer) PollRadioMode(*RadioSelector, Radio_PollRadioModeServer) error {
	return status.Errorf(codes.Unimplemented, "method PollRadioMode not implemented")
}
func (UnimplementedRadioServer) RadioOp(context.Context, *RadioCommand) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RadioOp not implemented")
}
func (UnimplementedRadioServer) ListAudioDevices(context.Context, *emptypb.Empty) (*AudioDeviceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudioDevices not implemented")
}
func (UnimplementedRadioServer) ListSupportedRadios(context.Context, *emptypb.Empty) (*SupportedRadioList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportedRadios not implemented")
}
func (UnimplementedRadioServer) SetupRadio(context.Context, *RadioConfig) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupRadio not implemented")
}
func (UnimplementedRadioServer) ShutdownRadio(context.Context, *RadioConfig) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownRadio not implemented")
}
func (UnimplementedRadioServer) mustEmbedUnimplementedRadioServer() {}

// UnsafeRadioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RadioServer will
// result in compilation errors.
type UnsafeRadioServer interface {
	mustEmbedUnimplementedRadioServer()
}

func RegisterRadioServer(s grpc.ServiceRegistrar, srv RadioServer) {
	s.RegisterService(&Radio_ServiceDesc, srv)
}

func _Radio_GetRadioMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RadioSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServer).GetRadioMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcl.Radio/GetRadioMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServer).GetRadioMode(ctx, req.(*RadioSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radio_PollRadioMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RadioSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RadioServer).PollRadioMode(m, &radioPollRadioModeServer{stream})
}

type Radio_PollRadioModeServer interface {
	Send(*RadioStatus) error
	grpc.ServerStream
}

type radioPollRadioModeServer struct {
	grpc.ServerStream
}

func (x *radioPollRadioModeServer) Send(m *RadioStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Radio_RadioOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RadioCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServer).RadioOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcl.Radio/RadioOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServer).RadioOp(ctx, req.(*RadioCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radio_ListAudioDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServer).ListAudioDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcl.Radio/ListAudioDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServer).ListAudioDevices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radio_ListSupportedRadios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServer).ListSupportedRadios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcl.Radio/ListSupportedRadios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServer).ListSupportedRadios(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radio_SetupRadio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RadioConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServer).SetupRadio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcl.Radio/SetupRadio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServer).SetupRadio(ctx, req.(*RadioConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radio_ShutdownRadio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RadioConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServer).ShutdownRadio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcl.Radio/ShutdownRadio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServer).ShutdownRadio(ctx, req.(*RadioConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// Radio_ServiceDesc is the grpc.ServiceDesc for Radio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Radio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcl.Radio",
	HandlerType: (*RadioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRadioMode",
			Handler:    _Radio_GetRadioMode_Handler,
		},
		{
			MethodName: "RadioOp",
			Handler:    _Radio_RadioOp_Handler,
		},
		{
			MethodName: "ListAudioDevices",
			Handler:    _Radio_ListAudioDevices_Handler,
		},
		{
			MethodName: "ListSupportedRadios",
			Handler:    _Radio_ListSupportedRadios_Handler,
		},
		{
			MethodName: "SetupRadio",
			Handler:    _Radio_SetupRadio_Handler,
		},
		{
			MethodName: "ShutdownRadio",
			Handler:    _Radio_ShutdownRadio_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollRadioMode",
			Handler:       _Radio_PollRadioMode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/radio.proto",
}
