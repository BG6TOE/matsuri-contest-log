syntax = "proto3";

package mcl;

option go_package = "proto/.";

import "proto/common.proto";
import "proto/mcl.proto";
import "google/protobuf/empty.proto";

message QSOField {
  string title = 1;
  string value = 2;
}

message ScoreResponse {
  map<string, int64> category_score = 1;
}

message QSOFields {
  repeated QSOField exchange_sent = 1;
  repeated QSOField exchange_rcvd = 2;
}

message OpenFileRequest {
  string name = 1;
}

service Gui {
  rpc CreateContest(mcl.CreateContestRequest) returns (mcl.StandardResponse);
  rpc LoadContest(mcl.LoadContestRequest) returns (mcl.StandardResponse);
  rpc ParseContest(mcl.ParseContestRequest) returns (mcl.ContestMetadata);
  rpc GetActiveContest(google.protobuf.Empty) returns (mcl.ActiveContest);

  rpc GetQSOFields(google.protobuf.Empty) returns (QSOFields);

  rpc StagingQSO(mcl.QSO) returns (mcl.QSO);
  rpc LogQSO(mcl.QSO) returns (mcl.QSO);
  rpc GetActiveQSOs(google.protobuf.Empty) returns (mcl.SnapshotMessage);
  rpc DeleteQSO(mcl.QSO) returns (mcl.StandardResponse);

  rpc ExportToAdif(OpenFileRequest) returns (mcl.StandardResponse);

  rpc GetScore(google.protobuf.Empty) returns (ScoreResponse);
}

message Spot {
  string dx_callsign = 1;
  string de_callsign = 2;
  int64 spot_timestamp = 3;
  int64 spot_frequency = 4;
  string memo = 5;
}

message CallsignLookupResultCatrgory { repeated string possible_callsigns = 1; }

message BandStatus { map<int64, string> band_status = 1; }

message CallsignLookupResult {
  map<string, CallsignLookupResultCatrgory> database_lookup = 1; // category -> list of possible callsigns
  map<string, BandStatus> band_status = 2; // mode -> per band status of the mode
}

message DraftQSOMessage {
  string uid = 1;
  string dx_callsign = 2;
  string mode = 3;
  map<string, string> exchange_sent = 4;
  map<string, string> exchange_rcvd = 5;
  string expect = 6;
}

message CheckPartialRequest {
  string callsign = 1;
}

message CheckPartialResult {
  string title = 1;
  repeated string callsign = 2;
}

message CheckPartialResponse {
  repeated CheckPartialResult results = 1;
}

message AddSpotDataRequest {
  string callsign = 1;
  string spotter = 2;
  string note = 3;
  int64 timeout = 4;
}

service RealtimeGui {
  // Defines a series of extended functions for server

  // Prepares a QSO, used to generate default QSO content for a specific DX
  // station. e.g. The server will generate exchange message to be sent (like
  // serial number) and expected message from the DX station (like zone)
  rpc DraftQSO(DraftQSOMessage) returns (DraftQSOMessage);

  rpc CheckPartial(CheckPartialRequest) returns (CheckPartialResponse);

  // Retrieves raw binlog messages from the backend.
  rpc RetrieveQSOUpdates(google.protobuf.Empty) returns (stream BinlogMessage);
}
