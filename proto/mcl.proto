syntax = "proto3";

package mcl;

import "google/protobuf/empty.proto";
import "proto/common.proto";

option go_package = "proto/.";

message Station {
  string callsign = 1; // Station Callsign
  string grid = 2;     // Grid locator XX## or XX##xx
  int32 region = 3;    // ITU region 1, 2, 3 (0 for unspecified)
  map<string, string> custom_fields = 4;
}

message ActiveContest {
  string uuid = 1; // Generated by binlog server to identify different contests
                   // across the network
  string name = 2;
  mcl.ContestMetadata contest = 3;
  Station station = 4;
  int64 begin_timestamp = 5;
  int64 end_timestamp = 6;
  string contest_script = 7;
}

enum QSOType {
  qso = 0;
  xqso = 1;
  draft = 2;
}

message QSO {
  string uid = 1;
  string local_callsign = 2;
  string dx_callsign = 3;
  int64 time = 4;
  int64 freq = 5;
  string mode = 6;
  map<string,string> exchange_sent = 7;
  map<string,string> exchange_rcvd = 8;
  QSOType type = 9;
  string operator = 10;
}

enum QSOOperationType {
  add_or_update = 0; // Adds or update the QSO, the QSO data should exist in
                     // previous binlog.
  delete = 2;
}

message QSOOp {
  QSOOperationType type = 1;
  string uid = 2;
}

message BinlogMessage {
  uint64 serial = 1; // A unique number counting from 0 for a single database
  // 2 and 3 are reserved
  oneof message {
    QSOOp qso_op = 4;
    QSO qso = 5;
  }
}

message SnapshotMessage {
  // A snapshot message is a set of calculated QSOs calculated based on the
  // binlog, in UID asending order
  repeated QSO qso = 1;
  // Sequence is the last serial number for calculating this snapshot, means all
  // messages from [0 to serial) are considered in this snapshot.
  uint64 serial = 2;
}

message BinlogMessageSet {
  // A binlog message set is a set of binlog messages that should be atomically
  // inserted into the database
  repeated BinlogMessage messages = 1;
}

enum ResultCode {
  success = 0;
  invalid_binlog = 1;
  invalid_access = 2;
  exists = 3;
  internal = 4;
}

message StandardResponse {
  ResultCode result_code = 1;
  string error_message = 2;
}

message RetrieveBinlogRequest {
  uint64 serial_start = 1;
  uint64 serial_end = 2;
}

message LoadContestRequest { string database_name = 1; }

message CreateContestRequest {
  string database_name = 1;
  ActiveContest contest = 2;
}

message ParseContestRequest { string contest_descriptor = 1; }

service Binlog {
  rpc CreateContest(CreateContestRequest) returns (StandardResponse);
  rpc LoadContest(LoadContestRequest) returns (StandardResponse);
  rpc GetActiveContest(google.protobuf.Empty) returns (ActiveContest);

  rpc Push(BinlogMessageSet) returns (StandardResponse);
  rpc Retrieve(RetrieveBinlogRequest) returns (BinlogMessageSet);
  rpc RetrieveSnapshot(RetrieveBinlogRequest) returns (SnapshotMessage);
}