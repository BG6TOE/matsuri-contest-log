// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.2
// source: proto/mcl.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QSOType int32

const (
	QSOType_qso   QSOType = 0
	QSOType_xqso  QSOType = 1
	QSOType_draft QSOType = 2
)

// Enum value maps for QSOType.
var (
	QSOType_name = map[int32]string{
		0: "qso",
		1: "xqso",
		2: "draft",
	}
	QSOType_value = map[string]int32{
		"qso":   0,
		"xqso":  1,
		"draft": 2,
	}
)

func (x QSOType) Enum() *QSOType {
	p := new(QSOType)
	*p = x
	return p
}

func (x QSOType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QSOType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mcl_proto_enumTypes[0].Descriptor()
}

func (QSOType) Type() protoreflect.EnumType {
	return &file_proto_mcl_proto_enumTypes[0]
}

func (x QSOType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QSOType.Descriptor instead.
func (QSOType) EnumDescriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{0}
}

type QSOOperationType int32

const (
	QSOOperationType_add_or_update QSOOperationType = 0 // Adds or update the QSO, the QSO data should exist in
	// previous binlog.
	QSOOperationType_delete QSOOperationType = 2
)

// Enum value maps for QSOOperationType.
var (
	QSOOperationType_name = map[int32]string{
		0: "add_or_update",
		2: "delete",
	}
	QSOOperationType_value = map[string]int32{
		"add_or_update": 0,
		"delete":        2,
	}
)

func (x QSOOperationType) Enum() *QSOOperationType {
	p := new(QSOOperationType)
	*p = x
	return p
}

func (x QSOOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QSOOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mcl_proto_enumTypes[1].Descriptor()
}

func (QSOOperationType) Type() protoreflect.EnumType {
	return &file_proto_mcl_proto_enumTypes[1]
}

func (x QSOOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QSOOperationType.Descriptor instead.
func (QSOOperationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{1}
}

type ResultCode int32

const (
	ResultCode_success        ResultCode = 0
	ResultCode_invalid_binlog ResultCode = 1
	ResultCode_invalid_access ResultCode = 2
	ResultCode_exists         ResultCode = 3
	ResultCode_internal       ResultCode = 4
)

// Enum value maps for ResultCode.
var (
	ResultCode_name = map[int32]string{
		0: "success",
		1: "invalid_binlog",
		2: "invalid_access",
		3: "exists",
		4: "internal",
	}
	ResultCode_value = map[string]int32{
		"success":        0,
		"invalid_binlog": 1,
		"invalid_access": 2,
		"exists":         3,
		"internal":       4,
	}
)

func (x ResultCode) Enum() *ResultCode {
	p := new(ResultCode)
	*p = x
	return p
}

func (x ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mcl_proto_enumTypes[2].Descriptor()
}

func (ResultCode) Type() protoreflect.EnumType {
	return &file_proto_mcl_proto_enumTypes[2]
}

func (x ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultCode.Descriptor instead.
func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{2}
}

type Station struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callsign     string            `protobuf:"bytes,1,opt,name=callsign,proto3" json:"callsign,omitempty"` // Station Callsign
	Grid         string            `protobuf:"bytes,2,opt,name=grid,proto3" json:"grid,omitempty"`         // Grid locator XX## or XX##xx
	Region       int32             `protobuf:"varint,3,opt,name=region,proto3" json:"region,omitempty"`    // ITU region 1, 2, 3 (0 for unspecified)
	CustomFields map[string]string `protobuf:"bytes,4,rep,name=custom_fields,json=customFields,proto3" json:"custom_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Station) Reset() {
	*x = Station{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Station) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Station) ProtoMessage() {}

func (x *Station) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Station.ProtoReflect.Descriptor instead.
func (*Station) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{0}
}

func (x *Station) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *Station) GetGrid() string {
	if x != nil {
		return x.Grid
	}
	return ""
}

func (x *Station) GetRegion() int32 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *Station) GetCustomFields() map[string]string {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

type ActiveContest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // Generated by binlog server to identify different contests
	// across the network
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Contest        *ContestMetadata `protobuf:"bytes,3,opt,name=contest,proto3" json:"contest,omitempty"`
	Station        *Station         `protobuf:"bytes,4,opt,name=station,proto3" json:"station,omitempty"`
	BeginTimestamp int64            `protobuf:"varint,5,opt,name=begin_timestamp,json=beginTimestamp,proto3" json:"begin_timestamp,omitempty"`
	EndTimestamp   int64            `protobuf:"varint,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	ContestScript  string           `protobuf:"bytes,7,opt,name=contest_script,json=contestScript,proto3" json:"contest_script,omitempty"`
}

func (x *ActiveContest) Reset() {
	*x = ActiveContest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveContest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveContest) ProtoMessage() {}

func (x *ActiveContest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveContest.ProtoReflect.Descriptor instead.
func (*ActiveContest) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{1}
}

func (x *ActiveContest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ActiveContest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActiveContest) GetContest() *ContestMetadata {
	if x != nil {
		return x.Contest
	}
	return nil
}

func (x *ActiveContest) GetStation() *Station {
	if x != nil {
		return x.Station
	}
	return nil
}

func (x *ActiveContest) GetBeginTimestamp() int64 {
	if x != nil {
		return x.BeginTimestamp
	}
	return 0
}

func (x *ActiveContest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *ActiveContest) GetContestScript() string {
	if x != nil {
		return x.ContestScript
	}
	return ""
}

type QSO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LocalCallsign string            `protobuf:"bytes,2,opt,name=local_callsign,json=localCallsign,proto3" json:"local_callsign,omitempty"`
	DxCallsign    string            `protobuf:"bytes,3,opt,name=dx_callsign,json=dxCallsign,proto3" json:"dx_callsign,omitempty"`
	Time          int64             `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Freq          int64             `protobuf:"varint,5,opt,name=freq,proto3" json:"freq,omitempty"`
	Mode          string            `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode,omitempty"`
	ExchangeSent  map[string]string `protobuf:"bytes,7,rep,name=exchange_sent,json=exchangeSent,proto3" json:"exchange_sent,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExchangeRcvd  map[string]string `protobuf:"bytes,8,rep,name=exchange_rcvd,json=exchangeRcvd,proto3" json:"exchange_rcvd,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type          QSOType           `protobuf:"varint,9,opt,name=type,proto3,enum=mcl.QSOType" json:"type,omitempty"`
	Operator      string            `protobuf:"bytes,10,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *QSO) Reset() {
	*x = QSO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QSO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QSO) ProtoMessage() {}

func (x *QSO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QSO.ProtoReflect.Descriptor instead.
func (*QSO) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{2}
}

func (x *QSO) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *QSO) GetLocalCallsign() string {
	if x != nil {
		return x.LocalCallsign
	}
	return ""
}

func (x *QSO) GetDxCallsign() string {
	if x != nil {
		return x.DxCallsign
	}
	return ""
}

func (x *QSO) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *QSO) GetFreq() int64 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *QSO) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *QSO) GetExchangeSent() map[string]string {
	if x != nil {
		return x.ExchangeSent
	}
	return nil
}

func (x *QSO) GetExchangeRcvd() map[string]string {
	if x != nil {
		return x.ExchangeRcvd
	}
	return nil
}

func (x *QSO) GetType() QSOType {
	if x != nil {
		return x.Type
	}
	return QSOType_qso
}

func (x *QSO) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type QSOOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type QSOOperationType `protobuf:"varint,1,opt,name=type,proto3,enum=mcl.QSOOperationType" json:"type,omitempty"`
	Uid  string           `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *QSOOp) Reset() {
	*x = QSOOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QSOOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QSOOp) ProtoMessage() {}

func (x *QSOOp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QSOOp.ProtoReflect.Descriptor instead.
func (*QSOOp) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{3}
}

func (x *QSOOp) GetType() QSOOperationType {
	if x != nil {
		return x.Type
	}
	return QSOOperationType_add_or_update
}

func (x *QSOOp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type BinlogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial uint64 `protobuf:"varint,1,opt,name=serial,proto3" json:"serial,omitempty"` // A unique number counting from 0 for a single database
	// 2 and 3 are reserved
	//
	// Types that are assignable to Message:
	//
	//	*BinlogMessage_QsoOp
	//	*BinlogMessage_Qso
	Message isBinlogMessage_Message `protobuf_oneof:"message"`
}

func (x *BinlogMessage) Reset() {
	*x = BinlogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinlogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinlogMessage) ProtoMessage() {}

func (x *BinlogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinlogMessage.ProtoReflect.Descriptor instead.
func (*BinlogMessage) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{4}
}

func (x *BinlogMessage) GetSerial() uint64 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (m *BinlogMessage) GetMessage() isBinlogMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *BinlogMessage) GetQsoOp() *QSOOp {
	if x, ok := x.GetMessage().(*BinlogMessage_QsoOp); ok {
		return x.QsoOp
	}
	return nil
}

func (x *BinlogMessage) GetQso() *QSO {
	if x, ok := x.GetMessage().(*BinlogMessage_Qso); ok {
		return x.Qso
	}
	return nil
}

type isBinlogMessage_Message interface {
	isBinlogMessage_Message()
}

type BinlogMessage_QsoOp struct {
	QsoOp *QSOOp `protobuf:"bytes,4,opt,name=qso_op,json=qsoOp,proto3,oneof"`
}

type BinlogMessage_Qso struct {
	Qso *QSO `protobuf:"bytes,5,opt,name=qso,proto3,oneof"`
}

func (*BinlogMessage_QsoOp) isBinlogMessage_Message() {}

func (*BinlogMessage_Qso) isBinlogMessage_Message() {}

type SnapshotMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A snapshot message is a set of calculated QSOs calculated based on the
	// binlog, in UID asending order
	Qso []*QSO `protobuf:"bytes,1,rep,name=qso,proto3" json:"qso,omitempty"`
	// Sequence is the last serial number for calculating this snapshot, means all
	// messages from [0 to serial) are considered in this snapshot.
	Serial uint64 `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
}

func (x *SnapshotMessage) Reset() {
	*x = SnapshotMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMessage) ProtoMessage() {}

func (x *SnapshotMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMessage.ProtoReflect.Descriptor instead.
func (*SnapshotMessage) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{5}
}

func (x *SnapshotMessage) GetQso() []*QSO {
	if x != nil {
		return x.Qso
	}
	return nil
}

func (x *SnapshotMessage) GetSerial() uint64 {
	if x != nil {
		return x.Serial
	}
	return 0
}

type BinlogMessageSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A binlog message set is a set of binlog messages that should be atomically
	// inserted into the database
	Messages []*BinlogMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *BinlogMessageSet) Reset() {
	*x = BinlogMessageSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinlogMessageSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinlogMessageSet) ProtoMessage() {}

func (x *BinlogMessageSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinlogMessageSet.ProtoReflect.Descriptor instead.
func (*BinlogMessageSet) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{6}
}

func (x *BinlogMessageSet) GetMessages() []*BinlogMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type StandardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode   ResultCode `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=mcl.ResultCode" json:"result_code,omitempty"`
	ErrorMessage string     `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *StandardResponse) Reset() {
	*x = StandardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardResponse) ProtoMessage() {}

func (x *StandardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardResponse.ProtoReflect.Descriptor instead.
func (*StandardResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{7}
}

func (x *StandardResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_success
}

func (x *StandardResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type RetrieveBinlogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialStart uint64 `protobuf:"varint,1,opt,name=serial_start,json=serialStart,proto3" json:"serial_start,omitempty"`
	SerialEnd   uint64 `protobuf:"varint,2,opt,name=serial_end,json=serialEnd,proto3" json:"serial_end,omitempty"`
}

func (x *RetrieveBinlogRequest) Reset() {
	*x = RetrieveBinlogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveBinlogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBinlogRequest) ProtoMessage() {}

func (x *RetrieveBinlogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBinlogRequest.ProtoReflect.Descriptor instead.
func (*RetrieveBinlogRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{8}
}

func (x *RetrieveBinlogRequest) GetSerialStart() uint64 {
	if x != nil {
		return x.SerialStart
	}
	return 0
}

func (x *RetrieveBinlogRequest) GetSerialEnd() uint64 {
	if x != nil {
		return x.SerialEnd
	}
	return 0
}

type LoadContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
}

func (x *LoadContestRequest) Reset() {
	*x = LoadContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadContestRequest) ProtoMessage() {}

func (x *LoadContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadContestRequest.ProtoReflect.Descriptor instead.
func (*LoadContestRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{9}
}

func (x *LoadContestRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

type CreateContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName string         `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	Contest      *ActiveContest `protobuf:"bytes,2,opt,name=contest,proto3" json:"contest,omitempty"`
}

func (x *CreateContestRequest) Reset() {
	*x = CreateContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContestRequest) ProtoMessage() {}

func (x *CreateContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContestRequest.ProtoReflect.Descriptor instead.
func (*CreateContestRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{10}
}

func (x *CreateContestRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *CreateContestRequest) GetContest() *ActiveContest {
	if x != nil {
		return x.Contest
	}
	return nil
}

type ParseContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestDescriptor string `protobuf:"bytes,1,opt,name=contest_descriptor,json=contestDescriptor,proto3" json:"contest_descriptor,omitempty"`
}

func (x *ParseContestRequest) Reset() {
	*x = ParseContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseContestRequest) ProtoMessage() {}

func (x *ParseContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseContestRequest.ProtoReflect.Descriptor instead.
func (*ParseContestRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcl_proto_rawDescGZIP(), []int{11}
}

func (x *ParseContestRequest) GetContestDescriptor() string {
	if x != nil {
		return x.ContestDescriptor
	}
	return ""
}

var File_proto_mcl_proto protoreflect.FileDescriptor

var file_proto_mcl_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x6d, 0x63, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x84, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x63, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x03, 0x51, 0x53, 0x4f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x78, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x63, 0x76, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x63, 0x76, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x63, 0x76, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x63, 0x76, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x05, 0x51, 0x53, 0x4f, 0x4f,
	0x70, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x75,
	0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x71, 0x73, 0x6f, 0x5f, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53,
	0x4f, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x05, 0x71, 0x73, 0x6f, 0x4f, 0x70, 0x12, 0x1c, 0x0a, 0x03,
	0x71, 0x73, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6d, 0x63, 0x6c, 0x2e,
	0x51, 0x53, 0x4f, 0x48, 0x00, 0x52, 0x03, 0x71, 0x73, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x71, 0x73, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f, 0x52,
	0x03, 0x71, 0x73, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x42, 0x0a, 0x10,
	0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x69, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x63, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x22, 0x39, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x69, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x13,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2a, 0x27, 0x0a, 0x07, 0x51, 0x53, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x71, 0x73, 0x6f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x78, 0x71, 0x73, 0x6f, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x10, 0x51,
	0x53, 0x4f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x2a, 0x5b,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x04, 0x32, 0x85, 0x03, 0x0a, 0x06,
	0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x4c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x63, 0x6c,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12, 0x44, 0x0a,
	0x10, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x1a, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x2e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_mcl_proto_rawDescOnce sync.Once
	file_proto_mcl_proto_rawDescData = file_proto_mcl_proto_rawDesc
)

func file_proto_mcl_proto_rawDescGZIP() []byte {
	file_proto_mcl_proto_rawDescOnce.Do(func() {
		file_proto_mcl_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_mcl_proto_rawDescData)
	})
	return file_proto_mcl_proto_rawDescData
}

var file_proto_mcl_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_mcl_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_mcl_proto_goTypes = []interface{}{
	(QSOType)(0),                  // 0: mcl.QSOType
	(QSOOperationType)(0),         // 1: mcl.QSOOperationType
	(ResultCode)(0),               // 2: mcl.ResultCode
	(*Station)(nil),               // 3: mcl.Station
	(*ActiveContest)(nil),         // 4: mcl.ActiveContest
	(*QSO)(nil),                   // 5: mcl.QSO
	(*QSOOp)(nil),                 // 6: mcl.QSOOp
	(*BinlogMessage)(nil),         // 7: mcl.BinlogMessage
	(*SnapshotMessage)(nil),       // 8: mcl.SnapshotMessage
	(*BinlogMessageSet)(nil),      // 9: mcl.BinlogMessageSet
	(*StandardResponse)(nil),      // 10: mcl.StandardResponse
	(*RetrieveBinlogRequest)(nil), // 11: mcl.RetrieveBinlogRequest
	(*LoadContestRequest)(nil),    // 12: mcl.LoadContestRequest
	(*CreateContestRequest)(nil),  // 13: mcl.CreateContestRequest
	(*ParseContestRequest)(nil),   // 14: mcl.ParseContestRequest
	nil,                           // 15: mcl.Station.CustomFieldsEntry
	nil,                           // 16: mcl.QSO.ExchangeSentEntry
	nil,                           // 17: mcl.QSO.ExchangeRcvdEntry
	(*ContestMetadata)(nil),       // 18: mcl.ContestMetadata
	(*emptypb.Empty)(nil),         // 19: google.protobuf.Empty
}
var file_proto_mcl_proto_depIdxs = []int32{
	15, // 0: mcl.Station.custom_fields:type_name -> mcl.Station.CustomFieldsEntry
	18, // 1: mcl.ActiveContest.contest:type_name -> mcl.ContestMetadata
	3,  // 2: mcl.ActiveContest.station:type_name -> mcl.Station
	16, // 3: mcl.QSO.exchange_sent:type_name -> mcl.QSO.ExchangeSentEntry
	17, // 4: mcl.QSO.exchange_rcvd:type_name -> mcl.QSO.ExchangeRcvdEntry
	0,  // 5: mcl.QSO.type:type_name -> mcl.QSOType
	1,  // 6: mcl.QSOOp.type:type_name -> mcl.QSOOperationType
	6,  // 7: mcl.BinlogMessage.qso_op:type_name -> mcl.QSOOp
	5,  // 8: mcl.BinlogMessage.qso:type_name -> mcl.QSO
	5,  // 9: mcl.SnapshotMessage.qso:type_name -> mcl.QSO
	7,  // 10: mcl.BinlogMessageSet.messages:type_name -> mcl.BinlogMessage
	2,  // 11: mcl.StandardResponse.result_code:type_name -> mcl.ResultCode
	4,  // 12: mcl.CreateContestRequest.contest:type_name -> mcl.ActiveContest
	13, // 13: mcl.Binlog.CreateContest:input_type -> mcl.CreateContestRequest
	12, // 14: mcl.Binlog.LoadContest:input_type -> mcl.LoadContestRequest
	19, // 15: mcl.Binlog.GetActiveContest:input_type -> google.protobuf.Empty
	9,  // 16: mcl.Binlog.Push:input_type -> mcl.BinlogMessageSet
	11, // 17: mcl.Binlog.Retrieve:input_type -> mcl.RetrieveBinlogRequest
	11, // 18: mcl.Binlog.RetrieveSnapshot:input_type -> mcl.RetrieveBinlogRequest
	10, // 19: mcl.Binlog.CreateContest:output_type -> mcl.StandardResponse
	10, // 20: mcl.Binlog.LoadContest:output_type -> mcl.StandardResponse
	4,  // 21: mcl.Binlog.GetActiveContest:output_type -> mcl.ActiveContest
	10, // 22: mcl.Binlog.Push:output_type -> mcl.StandardResponse
	9,  // 23: mcl.Binlog.Retrieve:output_type -> mcl.BinlogMessageSet
	8,  // 24: mcl.Binlog.RetrieveSnapshot:output_type -> mcl.SnapshotMessage
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_mcl_proto_init() }
func file_proto_mcl_proto_init() {
	if File_proto_mcl_proto != nil {
		return
	}
	file_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_mcl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Station); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveContest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QSO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QSOOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinlogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinlogMessageSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveBinlogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_mcl_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*BinlogMessage_QsoOp)(nil),
		(*BinlogMessage_Qso)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_mcl_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_mcl_proto_goTypes,
		DependencyIndexes: file_proto_mcl_proto_depIdxs,
		EnumInfos:         file_proto_mcl_proto_enumTypes,
		MessageInfos:      file_proto_mcl_proto_msgTypes,
	}.Build()
	File_proto_mcl_proto = out.File
	file_proto_mcl_proto_rawDesc = nil
	file_proto_mcl_proto_goTypes = nil
	file_proto_mcl_proto_depIdxs = nil
}
