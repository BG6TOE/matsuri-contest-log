// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/mcl.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinlogClient is the client API for Binlog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinlogClient interface {
	Push(ctx context.Context, in *BinlogMessageSet, opts ...grpc.CallOption) (*StandardResponse, error)
	Retrieve(ctx context.Context, in *RetrieveBinlogRequest, opts ...grpc.CallOption) (*BinlogMessageSet, error)
	RetrieveSnapshot(ctx context.Context, in *RetrieveBinlogRequest, opts ...grpc.CallOption) (*SnapshotMessage, error)
}

type binlogClient struct {
	cc grpc.ClientConnInterface
}

func NewBinlogClient(cc grpc.ClientConnInterface) BinlogClient {
	return &binlogClient{cc}
}

func (c *binlogClient) Push(ctx context.Context, in *BinlogMessageSet, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/Binlog/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binlogClient) Retrieve(ctx context.Context, in *RetrieveBinlogRequest, opts ...grpc.CallOption) (*BinlogMessageSet, error) {
	out := new(BinlogMessageSet)
	err := c.cc.Invoke(ctx, "/Binlog/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binlogClient) RetrieveSnapshot(ctx context.Context, in *RetrieveBinlogRequest, opts ...grpc.CallOption) (*SnapshotMessage, error) {
	out := new(SnapshotMessage)
	err := c.cc.Invoke(ctx, "/Binlog/RetrieveSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinlogServer is the server API for Binlog service.
// All implementations must embed UnimplementedBinlogServer
// for forward compatibility
type BinlogServer interface {
	Push(context.Context, *BinlogMessageSet) (*StandardResponse, error)
	Retrieve(context.Context, *RetrieveBinlogRequest) (*BinlogMessageSet, error)
	RetrieveSnapshot(context.Context, *RetrieveBinlogRequest) (*SnapshotMessage, error)
	mustEmbedUnimplementedBinlogServer()
}

// UnimplementedBinlogServer must be embedded to have forward compatible implementations.
type UnimplementedBinlogServer struct {
}

func (UnimplementedBinlogServer) Push(context.Context, *BinlogMessageSet) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedBinlogServer) Retrieve(context.Context, *RetrieveBinlogRequest) (*BinlogMessageSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedBinlogServer) RetrieveSnapshot(context.Context, *RetrieveBinlogRequest) (*SnapshotMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSnapshot not implemented")
}
func (UnimplementedBinlogServer) mustEmbedUnimplementedBinlogServer() {}

// UnsafeBinlogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinlogServer will
// result in compilation errors.
type UnsafeBinlogServer interface {
	mustEmbedUnimplementedBinlogServer()
}

func RegisterBinlogServer(s grpc.ServiceRegistrar, srv BinlogServer) {
	s.RegisterService(&Binlog_ServiceDesc, srv)
}

func _Binlog_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinlogMessageSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinlogServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Binlog/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinlogServer).Push(ctx, req.(*BinlogMessageSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binlog_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBinlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinlogServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Binlog/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinlogServer).Retrieve(ctx, req.(*RetrieveBinlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binlog_RetrieveSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBinlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinlogServer).RetrieveSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Binlog/RetrieveSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinlogServer).RetrieveSnapshot(ctx, req.(*RetrieveBinlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Binlog_ServiceDesc is the grpc.ServiceDesc for Binlog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Binlog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Binlog",
	HandlerType: (*BinlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Binlog_Push_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Binlog_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveSnapshot",
			Handler:    _Binlog_RetrieveSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mcl.proto",
}
