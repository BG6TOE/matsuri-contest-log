// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: proto/mclgui.proto

package __

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RadioMode int32

const (
	RadioMode_UNKNOWN RadioMode = 0
	RadioMode_CW      RadioMode = 1
	RadioMode_CWR     RadioMode = 2
	RadioMode_LSB     RadioMode = 3
	RadioMode_USB     RadioMode = 4
	RadioMode_AM      RadioMode = 5
	RadioMode_FM      RadioMode = 6
	RadioMode_DATAL   RadioMode = 7
	RadioMode_DATAU   RadioMode = 8
)

// Enum value maps for RadioMode.
var (
	RadioMode_name = map[int32]string{
		0: "UNKNOWN",
		1: "CW",
		2: "CWR",
		3: "LSB",
		4: "USB",
		5: "AM",
		6: "FM",
		7: "DATAL",
		8: "DATAU",
	}
	RadioMode_value = map[string]int32{
		"UNKNOWN": 0,
		"CW":      1,
		"CWR":     2,
		"LSB":     3,
		"USB":     4,
		"AM":      5,
		"FM":      6,
		"DATAL":   7,
		"DATAU":   8,
	}
)

func (x RadioMode) Enum() *RadioMode {
	p := new(RadioMode)
	*p = x
	return p
}

func (x RadioMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mclgui_proto_enumTypes[0].Descriptor()
}

func (RadioMode) Type() protoreflect.EnumType {
	return &file_proto_mclgui_proto_enumTypes[0]
}

func (x RadioMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadioMode.Descriptor instead.
func (RadioMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{0}
}

type QSOField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QSOField) Reset() {
	*x = QSOField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QSOField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QSOField) ProtoMessage() {}

func (x *QSOField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QSOField.ProtoReflect.Descriptor instead.
func (*QSOField) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{0}
}

func (x *QSOField) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QSOField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type QSOMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DxCallsign   string      `protobuf:"bytes,1,opt,name=dx_callsign,json=dxCallsign,proto3" json:"dx_callsign,omitempty"`
	Operator     string      `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Time         int64       `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Freq         int64       `protobuf:"varint,4,opt,name=freq,proto3" json:"freq,omitempty"`
	Mode         Mode        `protobuf:"varint,5,opt,name=mode,proto3,enum=mcl.Mode" json:"mode,omitempty"`
	ExchangeSent []*QSOField `protobuf:"bytes,6,rep,name=exchange_sent,json=exchangeSent,proto3" json:"exchange_sent,omitempty"`
	ExchangeRcvd []*QSOField `protobuf:"bytes,7,rep,name=exchange_rcvd,json=exchangeRcvd,proto3" json:"exchange_rcvd,omitempty"`
}

func (x *QSOMessage) Reset() {
	*x = QSOMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QSOMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QSOMessage) ProtoMessage() {}

func (x *QSOMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QSOMessage.ProtoReflect.Descriptor instead.
func (*QSOMessage) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{1}
}

func (x *QSOMessage) GetDxCallsign() string {
	if x != nil {
		return x.DxCallsign
	}
	return ""
}

func (x *QSOMessage) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *QSOMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *QSOMessage) GetFreq() int64 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *QSOMessage) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_phone
}

func (x *QSOMessage) GetExchangeSent() []*QSOField {
	if x != nil {
		return x.ExchangeSent
	}
	return nil
}

func (x *QSOMessage) GetExchangeRcvd() []*QSOField {
	if x != nil {
		return x.ExchangeRcvd
	}
	return nil
}

type DraftQSOMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DxCallsign string `protobuf:"bytes,1,opt,name=dx_callsign,json=dxCallsign,proto3" json:"dx_callsign,omitempty"`
}

func (x *DraftQSOMessage) Reset() {
	*x = DraftQSOMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DraftQSOMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DraftQSOMessage) ProtoMessage() {}

func (x *DraftQSOMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DraftQSOMessage.ProtoReflect.Descriptor instead.
func (*DraftQSOMessage) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{2}
}

func (x *DraftQSOMessage) GetDxCallsign() string {
	if x != nil {
		return x.DxCallsign
	}
	return ""
}

type ScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryScore map[string]int64 `protobuf:"bytes,1,rep,name=category_score,json=categoryScore,proto3" json:"category_score,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ScoreResponse) Reset() {
	*x = ScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreResponse) ProtoMessage() {}

func (x *ScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreResponse.ProtoReflect.Descriptor instead.
func (*ScoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{3}
}

func (x *ScoreResponse) GetCategoryScore() map[string]int64 {
	if x != nil {
		return x.CategoryScore
	}
	return nil
}

type QSOFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeSent []*QSOField `protobuf:"bytes,1,rep,name=exchange_sent,json=exchangeSent,proto3" json:"exchange_sent,omitempty"`
	ExchangeRcvd []*QSOField `protobuf:"bytes,2,rep,name=exchange_rcvd,json=exchangeRcvd,proto3" json:"exchange_rcvd,omitempty"`
}

func (x *QSOFields) Reset() {
	*x = QSOFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QSOFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QSOFields) ProtoMessage() {}

func (x *QSOFields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QSOFields.ProtoReflect.Descriptor instead.
func (*QSOFields) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{4}
}

func (x *QSOFields) GetExchangeSent() []*QSOField {
	if x != nil {
		return x.ExchangeSent
	}
	return nil
}

func (x *QSOFields) GetExchangeRcvd() []*QSOField {
	if x != nil {
		return x.ExchangeRcvd
	}
	return nil
}

type Spot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DxCallsign    string `protobuf:"bytes,1,opt,name=dx_callsign,json=dxCallsign,proto3" json:"dx_callsign,omitempty"`
	DeCallsign    string `protobuf:"bytes,2,opt,name=de_callsign,json=deCallsign,proto3" json:"de_callsign,omitempty"`
	SpotTimestamp int64  `protobuf:"varint,3,opt,name=spot_timestamp,json=spotTimestamp,proto3" json:"spot_timestamp,omitempty"`
	SpotFrequency int64  `protobuf:"varint,4,opt,name=spot_frequency,json=spotFrequency,proto3" json:"spot_frequency,omitempty"`
	Memo          string `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *Spot) Reset() {
	*x = Spot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spot) ProtoMessage() {}

func (x *Spot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spot.ProtoReflect.Descriptor instead.
func (*Spot) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{5}
}

func (x *Spot) GetDxCallsign() string {
	if x != nil {
		return x.DxCallsign
	}
	return ""
}

func (x *Spot) GetDeCallsign() string {
	if x != nil {
		return x.DeCallsign
	}
	return ""
}

func (x *Spot) GetSpotTimestamp() int64 {
	if x != nil {
		return x.SpotTimestamp
	}
	return 0
}

func (x *Spot) GetSpotFrequency() int64 {
	if x != nil {
		return x.SpotFrequency
	}
	return 0
}

func (x *Spot) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type CallsignLookupResultCatrgory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PossibleCallsigns []string `protobuf:"bytes,1,rep,name=possible_callsigns,json=possibleCallsigns,proto3" json:"possible_callsigns,omitempty"`
}

func (x *CallsignLookupResultCatrgory) Reset() {
	*x = CallsignLookupResultCatrgory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallsignLookupResultCatrgory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallsignLookupResultCatrgory) ProtoMessage() {}

func (x *CallsignLookupResultCatrgory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallsignLookupResultCatrgory.ProtoReflect.Descriptor instead.
func (*CallsignLookupResultCatrgory) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{6}
}

func (x *CallsignLookupResultCatrgory) GetPossibleCallsigns() []string {
	if x != nil {
		return x.PossibleCallsigns
	}
	return nil
}

type BandStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandStatus map[int64]string `protobuf:"bytes,1,rep,name=band_status,json=bandStatus,proto3" json:"band_status,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BandStatus) Reset() {
	*x = BandStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandStatus) ProtoMessage() {}

func (x *BandStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandStatus.ProtoReflect.Descriptor instead.
func (*BandStatus) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{7}
}

func (x *BandStatus) GetBandStatus() map[int64]string {
	if x != nil {
		return x.BandStatus
	}
	return nil
}

type CallsignLookupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseLookup map[string]*CallsignLookupResultCatrgory `protobuf:"bytes,1,rep,name=database_lookup,json=databaseLookup,proto3" json:"database_lookup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // category -> list of possible callsigns
	BandStatus     map[string]*BandStatus                   `protobuf:"bytes,2,rep,name=band_status,json=bandStatus,proto3" json:"band_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`             // mode -> per band status of the mode
}

func (x *CallsignLookupResult) Reset() {
	*x = CallsignLookupResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallsignLookupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallsignLookupResult) ProtoMessage() {}

func (x *CallsignLookupResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallsignLookupResult.ProtoReflect.Descriptor instead.
func (*CallsignLookupResult) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{8}
}

func (x *CallsignLookupResult) GetDatabaseLookup() map[string]*CallsignLookupResultCatrgory {
	if x != nil {
		return x.DatabaseLookup
	}
	return nil
}

func (x *CallsignLookupResult) GetBandStatus() map[string]*BandStatus {
	if x != nil {
		return x.BandStatus
	}
	return nil
}

type RadioStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Freq int64     `protobuf:"varint,1,opt,name=freq,proto3" json:"freq,omitempty"`
	Mode RadioMode `protobuf:"varint,2,opt,name=mode,proto3,enum=mcl.RadioMode" json:"mode,omitempty"`
	Tx   bool      `protobuf:"varint,3,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *RadioStatus) Reset() {
	*x = RadioStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioStatus) ProtoMessage() {}

func (x *RadioStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioStatus.ProtoReflect.Descriptor instead.
func (*RadioStatus) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{9}
}

func (x *RadioStatus) GetFreq() int64 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *RadioStatus) GetMode() RadioMode {
	if x != nil {
		return x.Mode
	}
	return RadioMode_UNKNOWN
}

func (x *RadioStatus) GetTx() bool {
	if x != nil {
		return x.Tx
	}
	return false
}

type RadioCommands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//
	//	*RadioCommands_SendCwMessage
	//	*RadioCommands_SetCwSpeed
	//	*RadioCommands_SetRadioBandMode
	//	*RadioCommands_Abort
	Op isRadioCommands_Op `protobuf_oneof:"op"`
}

func (x *RadioCommands) Reset() {
	*x = RadioCommands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mclgui_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioCommands) ProtoMessage() {}

func (x *RadioCommands) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mclgui_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioCommands.ProtoReflect.Descriptor instead.
func (*RadioCommands) Descriptor() ([]byte, []int) {
	return file_proto_mclgui_proto_rawDescGZIP(), []int{10}
}

func (m *RadioCommands) GetOp() isRadioCommands_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *RadioCommands) GetSendCwMessage() string {
	if x, ok := x.GetOp().(*RadioCommands_SendCwMessage); ok {
		return x.SendCwMessage
	}
	return ""
}

func (x *RadioCommands) GetSetCwSpeed() int32 {
	if x, ok := x.GetOp().(*RadioCommands_SetCwSpeed); ok {
		return x.SetCwSpeed
	}
	return 0
}

func (x *RadioCommands) GetSetRadioBandMode() RadioMode {
	if x, ok := x.GetOp().(*RadioCommands_SetRadioBandMode); ok {
		return x.SetRadioBandMode
	}
	return RadioMode_UNKNOWN
}

func (x *RadioCommands) GetAbort() bool {
	if x, ok := x.GetOp().(*RadioCommands_Abort); ok {
		return x.Abort
	}
	return false
}

type isRadioCommands_Op interface {
	isRadioCommands_Op()
}

type RadioCommands_SendCwMessage struct {
	SendCwMessage string `protobuf:"bytes,1,opt,name=send_cw_message,json=sendCwMessage,proto3,oneof"`
}

type RadioCommands_SetCwSpeed struct {
	SetCwSpeed int32 `protobuf:"varint,2,opt,name=set_cw_speed,json=setCwSpeed,proto3,oneof"`
}

type RadioCommands_SetRadioBandMode struct {
	SetRadioBandMode RadioMode `protobuf:"varint,3,opt,name=set_radio_band_mode,json=setRadioBandMode,proto3,enum=mcl.RadioMode,oneof"`
}

type RadioCommands_Abort struct {
	Abort bool `protobuf:"varint,4,opt,name=abort,proto3,oneof"`
}

func (*RadioCommands_SendCwMessage) isRadioCommands_Op() {}

func (*RadioCommands_SetCwSpeed) isRadioCommands_Op() {}

func (*RadioCommands_SetRadioBandMode) isRadioCommands_Op() {}

func (*RadioCommands_Abort) isRadioCommands_Op() {}

var File_proto_mclgui_proto protoreflect.FileDescriptor

var file_proto_mclgui_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x63, 0x6c, 0x67, 0x75, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x63, 0x6c, 0x1a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6d, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x08, 0x51, 0x53, 0x4f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xf8, 0x01, 0x0a, 0x0a, 0x51, 0x53, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66,
	0x72, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x09, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x63, 0x6c, 0x2e,
	0x51, 0x53, 0x4f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x63, 0x76, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x63, 0x76, 0x64, 0x22, 0x32, 0x0a, 0x0f, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x51, 0x53, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x9f,
	0x01, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x40,
	0x0a, 0x12, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x73, 0x0a, 0x09, 0x51, 0x53, 0x4f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x63,
	0x76, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51,
	0x53, 0x4f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x63, 0x76, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x04, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x70, 0x6f, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x70, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x22, 0x4d, 0x0a, 0x1c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x74, 0x72, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x40, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x42, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf0, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69,
	0x67, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x64,
	0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x69, 0x67, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x61, 0x74, 0x72, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x42,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x0b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x74, 0x78, 0x22, 0xbc, 0x01, 0x0a, 0x0d,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x77, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x43, 0x77, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x13, 0x73,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x42, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x62, 0x6f, 0x72, 0x74, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x2a, 0x61, 0x0a, 0x09, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x57, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x57, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x53, 0x42, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x53, 0x42, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x4d, 0x10, 0x05, 0x12,
	0x06, 0x0a, 0x02, 0x46, 0x4d, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x54, 0x41, 0x55, 0x10, 0x08, 0x32, 0x81, 0x04,
	0x0a, 0x03, 0x47, 0x75, 0x69, 0x12, 0x41, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x6d, 0x63,
	0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x51, 0x53, 0x4f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53,
	0x4f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x51, 0x53,
	0x4f, 0x12, 0x0f, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x08, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51, 0x53, 0x4f, 0x12, 0x3d, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x53, 0x4f, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x53, 0x4f, 0x12, 0x08, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x51,
	0x53, 0x4f, 0x1a, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e,
	0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xf7, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x75,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x51, 0x53, 0x4f, 0x12, 0x14, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x51,
	0x53, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x6d, 0x63, 0x6c, 0x2e,
	0x51, 0x53, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x51, 0x53, 0x4f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x42,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x35,
	0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53,
	0x70, 0x6f, 0x74, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x6f,
	0x74, 0x54, 0x6f, 0x54, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x12, 0x09, 0x2e, 0x6d, 0x63, 0x6c, 0x2e,
	0x53, 0x70, 0x6f, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb4, 0x01, 0x0a, 0x05,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e,
	0x6d, 0x63, 0x6c, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3b, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x07,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x12, 0x12, 0x2e, 0x6d, 0x63, 0x6c, 0x2e, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x15, 0x2e, 0x6d, 0x63,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x2e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_mclgui_proto_rawDescOnce sync.Once
	file_proto_mclgui_proto_rawDescData = file_proto_mclgui_proto_rawDesc
)

func file_proto_mclgui_proto_rawDescGZIP() []byte {
	file_proto_mclgui_proto_rawDescOnce.Do(func() {
		file_proto_mclgui_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_mclgui_proto_rawDescData)
	})
	return file_proto_mclgui_proto_rawDescData
}

var file_proto_mclgui_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_mclgui_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_mclgui_proto_goTypes = []interface{}{
	(RadioMode)(0),                       // 0: mcl.RadioMode
	(*QSOField)(nil),                     // 1: mcl.QSOField
	(*QSOMessage)(nil),                   // 2: mcl.QSOMessage
	(*DraftQSOMessage)(nil),              // 3: mcl.DraftQSOMessage
	(*ScoreResponse)(nil),                // 4: mcl.ScoreResponse
	(*QSOFields)(nil),                    // 5: mcl.QSOFields
	(*Spot)(nil),                         // 6: mcl.Spot
	(*CallsignLookupResultCatrgory)(nil), // 7: mcl.CallsignLookupResultCatrgory
	(*BandStatus)(nil),                   // 8: mcl.BandStatus
	(*CallsignLookupResult)(nil),         // 9: mcl.CallsignLookupResult
	(*RadioStatus)(nil),                  // 10: mcl.RadioStatus
	(*RadioCommands)(nil),                // 11: mcl.RadioCommands
	nil,                                  // 12: mcl.ScoreResponse.CategoryScoreEntry
	nil,                                  // 13: mcl.BandStatus.BandStatusEntry
	nil,                                  // 14: mcl.CallsignLookupResult.DatabaseLookupEntry
	nil,                                  // 15: mcl.CallsignLookupResult.BandStatusEntry
	(Mode)(0),                            // 16: mcl.Mode
	(*CreateContestRequest)(nil),         // 17: mcl.CreateContestRequest
	(*LoadContestRequest)(nil),           // 18: mcl.LoadContestRequest
	(*ParseContestRequest)(nil),          // 19: mcl.ParseContestRequest
	(*empty.Empty)(nil),                  // 20: google.protobuf.Empty
	(*QSO)(nil),                          // 21: mcl.QSO
	(*StandardResponse)(nil),             // 22: mcl.StandardResponse
	(*Contest)(nil),                      // 23: mcl.Contest
	(*ActiveContest)(nil),                // 24: mcl.ActiveContest
	(*SnapshotMessage)(nil),              // 25: mcl.SnapshotMessage
	(*BinlogMessage)(nil),                // 26: mcl.BinlogMessage
}
var file_proto_mclgui_proto_depIdxs = []int32{
	16, // 0: mcl.QSOMessage.mode:type_name -> mcl.Mode
	1,  // 1: mcl.QSOMessage.exchange_sent:type_name -> mcl.QSOField
	1,  // 2: mcl.QSOMessage.exchange_rcvd:type_name -> mcl.QSOField
	12, // 3: mcl.ScoreResponse.category_score:type_name -> mcl.ScoreResponse.CategoryScoreEntry
	1,  // 4: mcl.QSOFields.exchange_sent:type_name -> mcl.QSOField
	1,  // 5: mcl.QSOFields.exchange_rcvd:type_name -> mcl.QSOField
	13, // 6: mcl.BandStatus.band_status:type_name -> mcl.BandStatus.BandStatusEntry
	14, // 7: mcl.CallsignLookupResult.database_lookup:type_name -> mcl.CallsignLookupResult.DatabaseLookupEntry
	15, // 8: mcl.CallsignLookupResult.band_status:type_name -> mcl.CallsignLookupResult.BandStatusEntry
	0,  // 9: mcl.RadioStatus.mode:type_name -> mcl.RadioMode
	0,  // 10: mcl.RadioCommands.set_radio_band_mode:type_name -> mcl.RadioMode
	7,  // 11: mcl.CallsignLookupResult.DatabaseLookupEntry.value:type_name -> mcl.CallsignLookupResultCatrgory
	8,  // 12: mcl.CallsignLookupResult.BandStatusEntry.value:type_name -> mcl.BandStatus
	17, // 13: mcl.Gui.CreateContest:input_type -> mcl.CreateContestRequest
	18, // 14: mcl.Gui.LoadContest:input_type -> mcl.LoadContestRequest
	19, // 15: mcl.Gui.ParseContest:input_type -> mcl.ParseContestRequest
	20, // 16: mcl.Gui.GetActiveContest:input_type -> google.protobuf.Empty
	20, // 17: mcl.Gui.GetQSOFields:input_type -> google.protobuf.Empty
	2,  // 18: mcl.Gui.LogQSO:input_type -> mcl.QSOMessage
	20, // 19: mcl.Gui.GetActiveQSOs:input_type -> google.protobuf.Empty
	21, // 20: mcl.Gui.DeleteQSO:input_type -> mcl.QSO
	20, // 21: mcl.Gui.GetScore:input_type -> google.protobuf.Empty
	3,  // 22: mcl.RealtimeGuiServer.DraftQSO:input_type -> mcl.DraftQSOMessage
	20, // 23: mcl.RealtimeGuiServer.RetrieveQSOUpdates:input_type -> google.protobuf.Empty
	20, // 24: mcl.RealtimeGuiServer.RetrieveTelnet:input_type -> google.protobuf.Empty
	6,  // 25: mcl.RealtimeGuiServer.SendSpotToTelnet:input_type -> mcl.Spot
	20, // 26: mcl.Radio.GetRadioMode:input_type -> google.protobuf.Empty
	20, // 27: mcl.Radio.PollRadioMode:input_type -> google.protobuf.Empty
	11, // 28: mcl.Radio.RadioOp:input_type -> mcl.RadioCommands
	22, // 29: mcl.Gui.CreateContest:output_type -> mcl.StandardResponse
	22, // 30: mcl.Gui.LoadContest:output_type -> mcl.StandardResponse
	23, // 31: mcl.Gui.ParseContest:output_type -> mcl.Contest
	24, // 32: mcl.Gui.GetActiveContest:output_type -> mcl.ActiveContest
	5,  // 33: mcl.Gui.GetQSOFields:output_type -> mcl.QSOFields
	21, // 34: mcl.Gui.LogQSO:output_type -> mcl.QSO
	25, // 35: mcl.Gui.GetActiveQSOs:output_type -> mcl.SnapshotMessage
	22, // 36: mcl.Gui.DeleteQSO:output_type -> mcl.StandardResponse
	4,  // 37: mcl.Gui.GetScore:output_type -> mcl.ScoreResponse
	2,  // 38: mcl.RealtimeGuiServer.DraftQSO:output_type -> mcl.QSOMessage
	26, // 39: mcl.RealtimeGuiServer.RetrieveQSOUpdates:output_type -> mcl.BinlogMessage
	6,  // 40: mcl.RealtimeGuiServer.RetrieveTelnet:output_type -> mcl.Spot
	22, // 41: mcl.RealtimeGuiServer.SendSpotToTelnet:output_type -> mcl.StandardResponse
	10, // 42: mcl.Radio.GetRadioMode:output_type -> mcl.RadioStatus
	10, // 43: mcl.Radio.PollRadioMode:output_type -> mcl.RadioStatus
	22, // 44: mcl.Radio.RadioOp:output_type -> mcl.StandardResponse
	29, // [29:45] is the sub-list for method output_type
	13, // [13:29] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_mclgui_proto_init() }
func file_proto_mclgui_proto_init() {
	if File_proto_mclgui_proto != nil {
		return
	}
	file_proto_mcl_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_mclgui_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QSOField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QSOMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DraftQSOMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QSOFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallsignLookupResultCatrgory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BandStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallsignLookupResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mclgui_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioCommands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_mclgui_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RadioCommands_SendCwMessage)(nil),
		(*RadioCommands_SetCwSpeed)(nil),
		(*RadioCommands_SetRadioBandMode)(nil),
		(*RadioCommands_Abort)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_mclgui_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_proto_mclgui_proto_goTypes,
		DependencyIndexes: file_proto_mclgui_proto_depIdxs,
		EnumInfos:         file_proto_mclgui_proto_enumTypes,
		MessageInfos:      file_proto_mclgui_proto_msgTypes,
	}.Build()
	File_proto_mclgui_proto = out.File
	file_proto_mclgui_proto_rawDesc = nil
	file_proto_mclgui_proto_goTypes = nil
	file_proto_mclgui_proto_depIdxs = nil
}
